openRender

A Reyes based Renderer compliant with the RenderMan Spec 3.2

Preliminary Specification

Dec. 26, 2001 Juvenal A. Silva Jr.

Warning: This is a preliminary specification.



The openRender program is a scanline render based on the Reyes
architecture, an algorithm used to render complex images. It works on
the assumption that every geometric primitive can be reduced to a common
denominator, called micropolygons.
These are small quadrilaterals, with the size of half a pixel and that
combined can form any type of surface. All operations that usually are
made on pixels on other renders, on a reyes system are made on
micropolygons, and than these primitives are sampled using jitter or
a poison disc algorithm and then transfered to the screen space.
These combination of techniques bring us very smooth surfaces with
almost no jaggies (or alias).
The goal of the openRender project is to be compliant to the RenderMan
Spec 3.1 initially with some of the optional capabilities, and than
progressively incorporate more optional capabilities and ultimatelly
became a full RenderMan Spec 3.2 compliant implementation.

These are a list of the initial Geometric Primitives (RMan Spec 3.1):

- Quadrics:
    Sphere;
    Cone;
    Cylinder;
    Hyperboloid;
    Paraboloid;
    Disk;
    Torus.

- Polygons:
    Polygon;
    GeneralPolygon;
    PointsPolygons;
    GeneralPointsPolygons.

- Patches:
    Basis:
      BezierBasis;
      BSplinebasis;
      CatmullRomBasis;
      HermiteBasis;
      PowerBasis.
    Patch;
    PatchMesh.

- NURBS:
    NuPatch;
    TrimCurve (optional capability);

- Geometry:
    implementation-specific: utah teapot (initially).


These are the required features that *must* be implemented to be
RenderMan Spec 3.1 Compliant:

- Complete hierarchical graphics state, including attribute and
  transformation stack and the active light list;
- Orthographic and Perspective viewing transformations;
- Depth-based and Painter's algorithm hidden-surface methods;
- Pixel filter and anti-aliasing;
- Gamma correction and dithering before quantization;
- Generate picture files with any combination of RGB, A and Z, with the
  resolution specified by the user;
- Provide all the above geometric primitives with all the standard
  primitive variables;
- Provide the 14 (fourteen) standard light, surface, volume and
  displacement shaders required by the specification.
- Support the whole interface (lib calls and RIB in ASCII and binary
  formats).

These are the optional features that should be implemented initially,
in order of importance. The ones with an asterisk should be included in
the initial render already (please refer to the RenderMan Spec 3.1 or
3.2 for additional information):

- Programmable Shading (*);
- Displacements (*);
- Texture Mapping (*);
- Environment Mapping (*);
- Bump Mapping (*);
- Shadow Depth Mapping (*);
- Volume Shading (*);
- Depth of Field (*);
- Motion Blur (*);
- Area Light Sources (*);
- Solid Modeling (CSG);
- Trim Curves;
- Ray Tracing;
- Radiosity;
- Level of Detail;
- Spectral Colors;
- Deformations;
- Special Camera Projections

Also the main goal of the project is to produce the fastest and most
flexible open render engine available.